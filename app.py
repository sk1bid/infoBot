import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import find_dotenv, load_dotenv
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.exceptions import TelegramRetryAfter

from database.orm_query import orm_get_media, orm_get_and_increment_coins, orm_add_media, orm_get_and_decrement_coins, \
    can_user_click
from kbds.inline import get_inline_mix_btns

load_dotenv(find_dotenv())

from middlewares.db import DataBaseSession
from database.engine import create_db, drop_db, session_maker

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=os.getenv('TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
bot.my_admins_list = [851690283]

# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp = Dispatcher()

engine = session_maker.kw['bind']

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
edit_lock = asyncio.Lock()


@dp.callback_query(F.data.startswith("coin"))
async def coin_callback(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    can_click = await can_user_click(session, user_id)

    if not can_click:
        await callback.answer("–í—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏ –∫–Ω–æ–ø–∫—É —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", show_alert=True)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    async with edit_lock:
        try:
            action = callback.data.split("_")[-1]
            if action == "+":
                media = await orm_get_and_increment_coins(session, 1)
                await callback.answer("–°–ø–∞—Å–∏–±–æ!")
            elif action == "-":
                media = await orm_get_and_decrement_coins(session, 1)
                await callback.answer("–ò —Ç–µ–±–µ –Ω–µ —Ö–≤–æ—Ä–∞—Ç—å!")
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {callback.data}")
                return
            if media.coins >= 0:
                keyboard = get_inline_mix_btns(
                    btns={
                        "–ù–∞–ø–∏—Å–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É üé≠": "https://t.me/cg_skbid",
                        f"üü¢ Social Points: {media.coins}": "None",
                        "üìõ": "coin_-",
                        "‚ú¥": "coin_+",
                    },
                )
            else:
                keyboard = get_inline_mix_btns(
                    btns={
                        "–ù–∞–ø–∏—Å–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É üé≠": "https://t.me/cg_skbid",
                        f"üî¥ Social Points: {media.coins}": "None",
                        "üìõ": "coin_-",
                        "‚ú¥": "coin_+",
                    },
                )

            await bot.edit_message_reply_markup(
                chat_id=os.getenv("ID"),
                message_id=media.message_id,
                reply_markup=keyboard
            )
            logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {media.message_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ú–æ–Ω–µ—Ç—ã: {media.coins}")
        except TelegramRetryAfter as e:
            retry_after = e.retry_after
            logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(retry_after)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.edit_message_reply_markup(
                    chat_id=os.getenv("ID"),
                    message_id=media.message_id,
                    reply_markup=keyboard
                )
                logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {media.message_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
            except Exception as ex:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {ex}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


async def on_startup(bot: Bot):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    run_param = False
    if run_param:
        await drop_db()
        logger.debug("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É run_param.")

    await create_db()
    logger.debug("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞.")

    async with session_maker() as session:
        media = await orm_get_media(session, 1)

        keyboard = get_inline_mix_btns(
            btns={
                "–ù–∞–ø–∏—Å–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü—É üé≠": "https://t.me/cg_skbid",
                f"Social Points: {0}": "None",
                "üìõ": "coin_-",
                "‚ú¥": "coin_+",
            },
        )
        if media is None:
            text = " "
            try:
                message = await bot.send_message(chat_id=os.getenv('ID'), text=text, reply_markup=keyboard)
                await orm_add_media(session, message_id=message.message_id, coins=0)
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ media —Å message ID {message.message_id} –∏ coins=0.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å media: {e}")
        else:
            logger.debug(f"Media —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={media.id}, Coins={media.coins}")


async def on_shutdown(bot: Bot):
    logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...')
    try:
        await bot.close()
        logger.debug("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {e}")


async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    dp.update.middleware(DataBaseSession(session_pool=session_maker))

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) –∏ –Ω–∞—á–∏–Ω–∞–µ–º polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.debug("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

    # –ù–∞—á–∏–Ω–∞–µ–º polling
    try:
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")


if __name__ == '__main__':
    asyncio.run(main())
